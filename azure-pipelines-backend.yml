# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - RumexStore.Dal
    - RumexStore.Models
    - RumexStore.Service
    - RumexStore.Functions.ImageProcessing
    exclude:
    - Rumexstore-angular
pr:
  branches:
    include:
    - master
  paths:
    include:
    - RumexStore.Dal
    - RumexStore.Models
    - RumexStore.Service
    - RumexStore.Functions.ImageProcessing
    exclude:
    - Rumexstore-angular
pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
stages:
- stage: A
  jobs:
  - job: A1
    steps:
      - script: echo Hello A1
- stage: B
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
    - job: B1
      steps:
        - script: echo Hello B1  
# steps:
#   - script: |
#       echo backend build
#       echo Reason - $(Build.Reason)
#       echo Source Branch - $(Build.SourceBranch)
#       echo Source Branch Name - $(Build.SourceBranchName)

# # trigger:
# #   batch: true
# #   branches:
# #     include:
# #     - master
# #   paths:
# #     include:
# #     - RumexStore.Dal
# #     - RumexStore.Models
# #     - RumexStore.Service
# #     - RumexStore.Functions.ImageProcessing
# #     exclude:
# #     - Rumexstore-angular
# # pr:
# #   branches:
# #     include:
# #     - master
# #   paths:
# #     include:
# #     - RumexStore.Dal
# #     - RumexStore.Models
# #     - RumexStore.Service
# #     - RumexStore.Functions.ImageProcessing
# #     exclude:
# #     - Rumexstore-angular

# pool:
#   vmImage: windows-latest

# variables:
#   buildConfiguration: 'Release'

# stages:
# - stage: Build
#   displayName: Build Stage
#   jobs:
#   # - job: waitForValidation
#   #   displayName: Wait for external validation
#   #   pool: server
#   #   timeoutInMinutes: 4320 # job times out in 3 days
#   #   steps:
#   #   - task: ManualValidation@0
#   #     timeoutInMinutes: 1440 # task times out in 1 day
#   #     inputs:
#   #       notifyUsers: |
#   #         ghassan.taher@gmail.com
#   #         gtaher@yahoo.com
#   #       instructions: 'Please validate the build configuration and resume'
#   #       onTimeout: 'resume'
#   - job: Build
#     pool:
#       vmImage: windows-latest
#       steps:
#         - script: |
#             echo backend build
#             echo Reason - $(Build.Reason)
#             echo Source Branch - $(Build.SourceBranch)
#             echo Source Branch Name - $(Build.SourceBranchName)

#       # - task: UseDotNet@2
#       #   displayName: 'Install .NET Core SDK'
#       #   inputs:
#       #     version: 6.x
#       #     packageType: sdk
#       #     performMultiLevelLookup: true
#       # - task: DotNetCoreCLI@2
#       #   displayName: 'Restore project dependencies'
#       #   inputs:
#       #     command: 'restore'
#       #     projects: '**/*.csproj'
#       # - task: DotNetCoreCLI@2
#       #   displayName: 'Build the project - $(buildConfiguration)'
#       #   inputs:
#       #     command: 'build'
#       #     arguments: '--no-restore --configuration $(buildConfiguration)'
#       #     projects: '**/*.csproj'
#       # - script: dotnet publish -c $(buildConfiguration) --self-contained true -r win-x86
#       #   workingDirectory: RumexStore.Service
#       #   # workingDirectory: $(System.DefaultWorkingDirectory)
#       #   displayName: 'backend publish'
#       # - task: ArchiveFiles@2
#       #   inputs:
#       #     # rootFolderOrFile: $(System.DefaultWorkingDirectory)
#       #     rootFolderOrFile: $(System.DefaultWorkingDirectory)\RumexStore.Service\bin\Release\net6.0\win-x86\publish
#       #     # rootFolderOrFile: 'backend/bin/Release/net6.0/winx86/publish'
#       #     includeRootFolder: false
#       #     archiveType: zip
#       #     # archiveFile: '$(Build.ArtifactStagingDirectory)/backend/$(Build.BuildId).zip'
#       #     archiveFile: $(Build.ArtifactStagingDirectory)/backend/$(Build.BuildId).zip
#       #     replaceExistingArchive: true
#       #   displayName: 'backend zip files'

#       # - task: PublishBuildArtifacts@1
#       #   inputs:
#       #     pathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
#       #     artifactName: 'backend'
#       #   displayName: 'backend publish to pipeline'


