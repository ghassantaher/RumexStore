# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'

steps:
# - script: echo "Structure of work folder of this pipeline:"
# - script: tree $(Agent.WorkFolder)\1 /f
- script: 
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 6.x
    packageType: sdk
    performMultiLevelLookup: true
#     includePreviewVersions: true # Required for preview versions

# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: 'restore'
#     projects: '**/*.sln'
#     feedsToUse: 'select'
# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     arguments: '--configuration $(buildConfiguration)'
#     workingDirectory: RumexStore.Service
#   displayName: 'dotnet build $(buildConfiguration)'

- script: dotnet build --configuration $(buildConfiguration)
  workingDirectory: RumexStore.Service
  displayName: 'backend build'
# - script: dotnet test
#   workingDirectory: $(System.DefaultWorkingDirectory)
#   displayName: 'backend tests'
- script: dotnet test --logger trx --collect "Code coverage"
  workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'backend tests'
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
- powershell: Get-ChildItem -Path $(System.DefaultWorkingDirectory)\*.* -recurse
# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: 'test'
#     projects: '**/*Tests/*.csproj'
#     # arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
#     testRunTitle: 'xUNit Test Run'
# - script: dotnet test
#   # workingDirectory: backend
#   displayName: 'backend tests'
# - script: dotnet test 
  # workingDirectory: RumexStore.Dal.Tests
  # displayName: 'Rumex Store Dal Tests'
# - task: DotNetCoreCLI@2
#   displayName: 'dotnet test'
#   inputs:
#     command: 'test'
#     projects: '**/*Tests.csproj'
#     arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./MyCoverage/'
#     publishTestResults: true
# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish Code Coverage Results'
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/**/MyCoverage/coverage.cobertura.xml'
#     failIfCoverageEmpty: true
# - task: DotNetCoreCLI@2
#   inputs:
#       command: "test"
#       includeNuGetOrg: true
#       projects: '**/*.sln'
#       publishTestResults: true
#   displayName: Run the server-side tests
# - task: CopyFiles@2
#   displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     Contents: '**\bin\release\**'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'
# - task: PublishBuildArtifacts@1
#   displayName: Publish Artifacts - Website
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: website
- task: CmdLine@2
  inputs:
    script: |
      echo "RumexStore.Service"
      tree $(System.DefaultWorkingDirectory)/RumexStore.Service  
- powershell: Get-ChildItem -Path $(System.DefaultWorkingDirectory)/RumexStore.Service\*.* -recurse
- script: dotnet publish -c $(buildConfiguration) --self-contained true -r win-x86
  workingDirectory: RumexStore.Service
  # workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'backend publish'


- task: CmdLine@2
  inputs:
    script: |
      echo publish dir - "$($(System.DefaultWorkingDirectory)\RumexStore.Service\bin\Release\net6.0\win-x86\publish)"
      tree $(System.DefaultWorkingDirectory)\RumexStore.Service\bin\Release\net6.0\win-x86\publish  
- powershell: Get-ChildItem -Path $(System.DefaultWorkingDirectory)\RumexStore.Service\bin\Release\net6.0\win-x86\publish\*.* -recurse
- task: ArchiveFiles@2
  inputs:
    # rootFolderOrFile: $(System.DefaultWorkingDirectory)
    rootFolderOrFile: $(System.DefaultWorkingDirectory)\RumexStore.Service\bin\Release\net6.0\win-x86\publish
    # rootFolderOrFile: 'backend/bin/Release/net6.0/winx86/publish'
    includeRootFolder: false
    archiveType: zip
    # archiveFile: '$(Build.ArtifactStagingDirectory)/backend/$(Build.BuildId).zip'
    archiveFile: $(Build.ArtifactStagingDirectory)/backend/$(Build.BuildId).zip
    replaceExistingArchive: true
  displayName: 'backend zip files'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
    artifactName: 'backend'
  displayName: 'backend publish to pipeline'
